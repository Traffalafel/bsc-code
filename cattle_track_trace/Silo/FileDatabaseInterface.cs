using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;
using Orleans;
using Orleans.Runtime;
using Orleans.Serialization;
using Orleans.Storage;
using System;
using System.Diagnostics;
using System.IO;
using System.Threading.Tasks;
using Microsoft.VisualStudio.Threading;

namespace Silo
{

    public class FileDatabaseInterfaceOptions
    {
        public string DatabaseScript { get; set; }
        public string ComponentName { get; set; }
        public string DataDirectory { get; set; }
    }

    public class FileDatabaseInterfaceFactory
    {
        // Assumes that the configuration has been added to services
        public static FileDatabaseInterface Create(IServiceProvider services, string name)
        {
            return ActivatorUtilities.CreateInstance<FileDatabaseInterface>(services, name);
        }
    }

    public class FileDatabaseInterface : IGrainStorage, IDisposable
    {
        private readonly IGrainFactory _grainFactory;
        private readonly ILogger<FileDatabaseInterface> _logger;
        private readonly ITypeResolver _typeResolver;
        private readonly JsonSerializerSettings _serializerSettings;

        private readonly string _dataDirectory;
        private readonly string _componentName;
        private readonly string _databaseScript;

        private Process _process;

        public FileDatabaseInterface(
            IGrainFactory grainFactory,
            ILogger<FileDatabaseInterface> logger,
            ITypeResolver typeResolver,
            FileDatabaseInterfaceOptions options)
        {
            _grainFactory = grainFactory;
            _logger = logger;
            _typeResolver = typeResolver;
            _serializerSettings = OrleansJsonSerializer.GetDefaultSerializerSettings(_typeResolver, _grainFactory);

            var dataDirectory = options.DataDirectory;
            if (string.IsNullOrWhiteSpace(dataDirectory))
            {
                throw new ArgumentException("Data directory not specified");
            }
            var directory = new DirectoryInfo(dataDirectory);
            if (!directory.Exists)
            {
                directory.Create();
            }
            _dataDirectory = directory.FullName;
            _logger.LogInformation("Data directory: {0}", _dataDirectory);

            _databaseScript = options.DatabaseScript;
            var file = new FileInfo(_databaseScript);
            if (!file.Exists)
            {
                throw new FileNotFoundException("Database script not found");
            }
            _logger.LogInformation("Database script: {0}", _databaseScript);

            _componentName = options.ComponentName;
            _logger.LogInformation("Component name: {0}", _componentName);

            var info = this.CreateProcessInfo();
            _process = Process.Start(info);
        }

        public void Dispose()
        {
            _logger.LogInformation("Disposing database process");
            _process.Dispose();
        }

        private ProcessStartInfo CreateProcessInfo()
        {
            // Credits to https://medium.com/better-programming/running-python-script-from-c-and-working-with-the-results-843e68d230e5
            var info = new ProcessStartInfo();
            info.FileName = "python";
            info.Arguments = string.Format("\"{0}\" \"{1}\" \"{2}\" ", _databaseScript, _dataDirectory, _componentName);
            info.UseShellExecute = false; // Do not use OS shell
            info.CreateNoWindow = false; // We don't need new window
            info.RedirectStandardInput = true;
            info.RedirectStandardOutput = true;// Any output, generated by application will be redirected back
            return info;
        }

        public async Task ReadStateAsync(string grainType, GrainReference grainRef, IGrainState state)
        {

            var stateName = state.State.GetType().Name;
            var key = grainRef.GetPrimaryKey().ToString();

            var stateId = key + "." + stateName;
            stateId = stateId.Replace("\"", "\\\"");

            var args = string.Format("read \"{0}\"", stateId);
            await _process.StandardInput.WriteLineAsync(args);

            //var info = CreateProcessInfo();
            //info.Arguments += string.Format("read \"{0}\"", stateId);

            Console.WriteLine("Reading state: {0}", state.State.GetType());
            var result = await _process.StandardOutput.ReadToEndAsync();
            Console.WriteLine("Result: {0}", result);

            if (string.IsNullOrWhiteSpace(result) || string.IsNullOrEmpty(result))
            {
                return;
            }
            _logger.LogInformation("Result from reading: {0}", result);
            _logger.LogInformation("Deserializing back to type {0}", state.State.GetType());
            state.State = JsonConvert.DeserializeObject(result, state.State.GetType(), _serializerSettings);
        }

        public async Task WriteStateAsync(string grainType, GrainReference grainRef, IGrainState state)
        {
            var stateName = state.State.GetType().Name;
            var key = grainRef.GetPrimaryKey().ToString();
            var stateId = key + "." + stateName;
            stateId = stateId.Replace("\"", "\\\"");

            var stateValue = JsonConvert.SerializeObject(state.State, _serializerSettings);
            stateValue = stateValue.Replace("\"", "\\\"");
            
            Console.WriteLine("State being written to cow: {0}", stateValue);

            var args = string.Format("write \"{0}\" \"{1}\"", stateId, stateValue);
            await _process.StandardInput.WriteLineAsync(args);

            //var info = CreateProcessInfo();
            //info.Arguments += string.Format("write \"{0}\" \"{1}\"", stateId, stateValue);
            //var process = Process.Start(info);

            //return AwaitExtensions.WaitForExitAsync(process);
        }

        public async Task ClearStateAsync(string grainType, GrainReference grainRef, IGrainState state)
        {
            var stateName = state.State.GetType().Name;
            var key = grainRef.GetPrimaryKey().ToString();

            var stateId = key + "." + stateName;
            stateId = stateId.Replace("\"", "\\\"");

            var args = string.Format("write \"{0}\"", stateId);
            await _process.StandardInput.WriteLineAsync(args);

            //var info = CreateProcessInfo();
            //info.Arguments += string.Format("clear \"{0}\"", stateId);
            //var process = Process.Start(info);

            //return AwaitExtensions.WaitForExitAsync(process);
        }

    }
}
